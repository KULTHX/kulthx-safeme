<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Scripts - KULTHX SAFEME</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/socket.io/socket.io.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Montserrat:wght@700;800;900&display=swap" rel="stylesheet">
  <style>
    @tailwind base;
    @tailwind components;
    @tailwind utilities;

    body {
      background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
      font-family: "Inter", sans-serif;
      color: #e0e0e0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    h1, h2, h3 {
      font-family: "Montserrat", sans-serif;
    }

    .glass-card {
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
    }

    .gradient-text {
      background-clip: text;
      -webkit-background-clip: text;
      color: transparent;
      background-image: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      transition: all 0.3s ease;
      border: none;
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    }

    /* Custom animations for toast notifications and modal */
    @keyframes slideIn {
      from { transform: translateY(-100%); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }
    @keyframes slideOut {
      from { transform: translateY(0); opacity: 1; }
      to { transform: translateY(-100%); opacity: 0; }
    }
    .toast {
      animation: slideIn 0.3s ease-out forwards;
    }
    .toast.hide {
      animation: slideOut 0.3s ease-out forwards;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    .modal {
      animation: fadeIn 0.3s ease-out forwards;
    }

    /* Remove focus outlines and borders */
    input:focus, textarea:focus, button:focus {
      outline: none !important;
      box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.2) !important;
      border-color: rgba(255, 255, 255, 0.3) !important;
    }

    /* Mobile-specific styles */
    @media (max-width: 768px) {
      .mobile-text-sm { font-size: 0.875rem; }
      .mobile-text-base { font-size: 1rem; }
      .mobile-text-lg { font-size: 1.125rem; }
      .mobile-text-xl { font-size: 1.25rem; }
      .mobile-text-2xl { font-size: 1.5rem; }
      .mobile-text-3xl { font-size: 1.875rem; }
    }
  </style>
</head>
<body>
  <!-- Toast Notification Container -->
  <div id="toast" class="fixed top-4 right-4 z-50 hidden bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg">
    <span id="toastMessage"></span>
  </div>

  <!-- Edit Modal -->
  <div id="editModal" class="fixed inset-0 bg-black/50 hidden flex items-center justify-center z-50 modal p-4">
    <div class="glass-card p-4 md:p-6 rounded-lg shadow-xl w-full max-w-2xl">
      <h3 class="text-lg md:text-xl font-semibold gradient-text mb-3 md:mb-4">Edit Script</h3>
      <textarea id="editScriptInput" rows="4" class="w-full p-3 md:p-4 bg-black/20 border border-white/20 rounded-lg text-white text-sm md:text-base resize-none"></textarea>
      <div class="flex justify-end space-x-3 mt-3 md:mt-4">
        <button id="cancelEdit" class="bg-gray-600 hover:bg-gray-700 text-white py-2 px-3 md:px-4 rounded-lg text-sm md:text-base">Cancel</button>
        <button id="saveEdit" class="btn-primary text-white py-2 px-3 md:px-4 rounded-lg text-sm md:text-base">Save</button>
      </div>
    </div>
  </div>

  <!-- Sidebar Toggle Button -->
  <button id="sidebarToggle" class="fixed top-4 left-4 z-50 bg-white hover:bg-gray-100 text-gray-800 p-2 md:p-3 rounded-full shadow-lg transition-all duration-200 hover:scale-105">
    <svg class="w-5 h-5 md:w-6 md:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
  </button>

  <!-- Sidebar -->
  <div id="sidebar" class="fixed top-0 left-0 h-full w-56 md:w-64 glass-card transform -translate-x-full transition-transform duration-300 ease-in-out z-40 shadow-2xl">
    <div class="p-4 md:p-6">
      <h2 class="text-lg md:text-2xl font-display font-bold gradient-text">KULTHX SAFEME</h2>
      <ul class="mt-6 md:mt-8 space-y-3 md:space-y-4">
        <li><a href="/real-home" class="block text-sm md:text-lg hover:bg-white/10 px-3 md:px-4 py-2 md:py-3 rounded-md transition-all duration-200 text-white">🏠 الرئيسية</a></li>
        <li><a href="/my-scripts" class="block text-sm md:text-lg hover:bg-white/10 px-3 md:px-4 py-2 md:py-3 rounded-md transition-all duration-200 text-white">📜 نصوصي</a></li>
        <li><a href="/real-home#about" class="block text-sm md:text-lg hover:bg-white/10 px-3 md:px-4 py-2 md:py-3 rounded-md transition-all duration-200 text-white">ℹ حول</a></li>
      </ul>
    </div>
  </div>

  <header class="glass-card p-3 md:p-6 shadow-lg">
    <nav class="flex justify-end items-center max-w-7xl mx-auto">
      <h1 class="text-2xl md:text-4xl font-display font-extrabold gradient-text tracking-tight">🔒 KULTHX SAFEME</h1>
    </nav>
  </header>

  <main class="flex-grow max-w-7xl mx-auto p-4 md:p-8">
    <section class="py-12 md:py-16">
      <h2 class="text-3xl md:text-4xl font-display font-bold mb-6 md:mb-8 text-center gradient-text">📜 My Protected Scripts</h2>
      <div id="scriptsList" class="space-y-4 md:space-y-6">
        <!-- Scripts will be loaded here -->
      </div>
    </section>
  </main>

  <footer class="glass-card p-6 md:p-8 text-center mt-auto">
    <div class="max-w-4xl mx-auto">
      <div class="mb-4 md:mb-6">
        <h3 class="text-xl md:text-2xl font-display font-bold gradient-text mb-2">KULTHX SAFEME</h3>
        <p class="text-base md:text-lg text-gray-300">© 2025 جميع الحقوق محفوظة ✨</p>
      </div>
      
      <div class="text-xs md:text-sm text-gray-400">
        <p>منصة آمنة وموثوقة لحماية نصوص Roblox</p>
      </div>
    </div>
  </footer>

  <script>
    // Generate or retrieve user ID
    let userId = localStorage.getItem("userId");
    if (!userId) {
      userId = crypto.randomUUID();
      localStorage.setItem("userId", userId);
    }

    // Socket.IO for online users (removed from display)
    const socket = io();
    socket.on("onlineUsers", (count) => {
      // This event listener is kept for potential future use, but not displayed
    });

    // Sidebar toggle
    const sidebar = document.getElementById("sidebar");
    const sidebarToggle = document.getElementById("sidebarToggle");
    sidebarToggle.addEventListener("click", () => {
      sidebar.classList.toggle("-translate-x-full");
    });

    // Toast notification function
    function showToast(message, type = "success") {
      const toast = document.getElementById("toast");
      const toastMessage = document.getElementById("toastMessage");
      toastMessage.textContent = message;
      toast.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg shadow-lg ${type === "success" ? "bg-green-600" : "bg-red-600"} text-white toast`;
      toast.classList.remove("hidden");
      setTimeout(() => {
        toast.classList.add("hide");
        setTimeout(() => toast.classList.add("hidden"), 300);
      }, 3000);
    }

    // Load scripts
    async function loadScripts() {
      try {
        const response = await fetch("/my-scripts", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userId })
        });
        const scripts = await response.json();
        if (scripts.error) {
          showToast(scripts.error, "error");
          return;
        }

        const scriptsList = document.getElementById("scriptsList");
        scriptsList.innerHTML = "";
        if (scripts.length === 0) {
          scriptsList.innerHTML = 
            `<div class="glass-card p-4 md:p-6 rounded-lg shadow-xl text-center">
              <p class="text-gray-400 text-sm md:text-base">No scripts found. Protect your first script on the <a href="/real-home" class="gradient-text font-semibold hover:underline">home page</a>.</p>
            </div>`;
          return;
        }

        scripts.forEach(script => {
          const scriptDiv = document.createElement("div");
          scriptDiv.className = "glass-card p-4 md:p-6 rounded-lg shadow-xl";
          scriptDiv.innerHTML = `
            <p class="font-semibold gradient-text text-sm md:text-base">Loadstring:</p>
            <input type="text" value="${script.loadstring.replace(/"/g, "&quot;")}" readonly class="w-full p-2 md:p-3 bg-black/20 border border-white/20 rounded-lg mt-1 text-white loadstring-input font-mono text-xs md:text-sm">
            <p class="mt-2 md:mt-3 text-gray-400 text-xs md:text-sm"><span class="font-semibold gradient-text">Created:</span> ${new Date(script.createdAt).toLocaleString()}</p>
            <textarea rows="3" class="w-full p-2 md:p-3 mt-2 md:mt-3 bg-black/20 border border-white/20 rounded-lg text-white script-content font-mono text-xs md:text-sm resize-none" readonly>${script.script.replace(/</g, "&lt;").replace(/>/g, "&gt;")}</textarea>
            <div class="flex flex-wrap gap-2 md:gap-3 mt-3 md:mt-4">
              <button class="edit-btn btn-primary text-white py-1.5 md:py-2 px-3 md:px-4 rounded-lg shadow-md text-xs md:text-sm" data-script-id="${script.id}">✏️ Edit</button>
              <button class="delete-btn bg-red-600 hover:bg-red-700 text-white py-1.5 md:py-2 px-3 md:px-4 rounded-lg shadow-md transition-transform hover:scale-105 text-xs md:text-sm" data-script-id="${script.id}">🗑️ Delete</button>
              <button class="copy-btn btn-primary text-white py-1.5 md:py-2 px-3 md:px-4 rounded-lg shadow-md text-xs md:text-sm" data-loadstring="${script.loadstring.replace(/"/g, "&quot;")}">📋 Copy Loadstring</button>
            </div>
          `;
          scriptsList.appendChild(scriptDiv);
        });

        // Add event listeners for edit, delete, and copy buttons
        document.querySelectorAll(".edit-btn").forEach(button => {
          button.addEventListener("click", () => {
            const id = button.dataset.scriptId;
            const scriptContent = button.closest(".glass-card").querySelector(".script-content").value;
            openEditModal(id, scriptContent);
          });
        });

        document.querySelectorAll(".delete-btn").forEach(button => {
          button.addEventListener("click", () => {
            const id = button.dataset.scriptId;
            deleteScript(id);
          });
        });

        document.querySelectorAll(".copy-btn").forEach(button => {
          button.addEventListener("click", () => {
            const loadstring = button.dataset.loadstring;
            copyLoadstring(loadstring);
          });
        });
      } catch (err) {
        console.error("Error loading scripts:", err);
        showToast("Error loading scripts!", "error");
      }
    }

    // Edit modal handling
    let currentEditId = null;
    function openEditModal(id, script) {
      currentEditId = id;
      const modal = document.getElementById("editModal");
      const input = document.getElementById("editScriptInput");
      input.value = script;
      modal.classList.remove("hidden");
    }

    document.getElementById("cancelEdit").addEventListener("click", () => {
      document.getElementById("editModal").classList.add("hidden");
      currentEditId = null;
    });

    document.getElementById("saveEdit").addEventListener("click", async () => {
      const newScript = document.getElementById("editScriptInput").value;
      if (!newScript) {
        showToast("Script cannot be empty!", "error");
        return;
      }

      try {
        const response = await fetch(`/my-scripts/${currentEditId}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ script: newScript, userId })
        });
        const data = await response.json();
        if (data.error) {
          showToast(data.error, "error");
          return;
        }
        showToast(data.message);
        document.getElementById("editModal").classList.add("hidden");
        currentEditId = null;
        loadScripts();
      } catch (err) {
        console.error("Error updating script:", err);
        showToast("Error updating script!", "error");
      }
    });

    // Delete script
    async function deleteScript(id) {
      if (!confirm("Are you sure you want to delete this script?")) return;

      try {
        const response = await fetch(`/my-scripts/${id}`, {
          method: "DELETE",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userId })
        });
        const data = await response.json();
        if (data.error) {
          showToast(data.error, "error");
          return;
        }
        showToast(data.message);
        loadScripts();
      } catch (err) {
        console.error("Error deleting script:", err);
        showToast("Error deleting script!", "error");
      }
    }

    // Copy loadstring
    async function copyLoadstring(loadstring) {
      try {
        await navigator.clipboard.writeText(loadstring);
        showToast("Loadstring copied to clipboard!");
      } catch (err) {
        console.error("Error copying loadstring:", err);
        // Fallback to document.execCommand
        const tempInput = document.createElement("input");
        tempInput.value = loadstring;
        document.body.appendChild(tempInput);
        tempInput.select();
        try {
          document.execCommand("copy");
          showToast("Loadstring copied to clipboard!");
        } catch (e) {
          console.error("Fallback copy failed:", e);
          showToast("Failed to copy loadstring!", "error");
        } finally {
          document.body.removeChild(tempInput);
        }
      }
    }

    // Load scripts on page load
    loadScripts();
  </script>
</body>
</html>

